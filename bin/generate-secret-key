#!/usr/bin/env node

const util = require('util')
const fs = require('fs')
const path = require('path')
const { exit } = require('process')
const exec = util.promisify(require('child_process').exec)

const args = process.argv.slice(2)
const KEY_PATH = path.join(__dirname, '..', 'secret-key')

const showHelp = () => {
    const help = `
    Usage
        $ bin/generate-secret-key [--keep]

    Argument
        --keep        Keep the secret key file after converting it to a hex string.
        --help, -h    Show this help message

    Result
        Generates a file named 'secret-key' in the current directory.
        Then converts the key to a hex string and outputs it to standard output.
        Deletes the key unless the --keep argument is given

        Uses the @fastify/secure-session module to generate the key.
    `
    console.log(help)
}

if (args.includes('--help') || args.includes('-h')) {
    showHelp()
    exit(0)
}

const keepKey = args.includes('--keep')

const generateSecretKey = async () => {
    console.log('Generating secret-key...')
    const { stdout, stderr } = await exec('npx --yes @fastify/secure-session > secret-key')
    console.log('Done.')
    stdout && console.log('Output:', stdout)
    stderr && console.error('Errors:', stderr)

    const keyBuffer = fs.readFileSync(KEY_PATH)
    const keyString = keyBuffer.toString('hex')
    console.log(keyString)
}

const main = async () => {
    await generateSecretKey()

    if (!keepKey) {
        console.log('Deleting secret-key file...')
        fs.unlinkSync(KEY_PATH)
        console.log('Done.')
    }
}
main()

// const hash = async password => {
//   const hashed = await auth.hash(password)
//   console.log(hashed)
// }

// const password = args[0]
// hash(password)
